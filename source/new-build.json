{
    "Usage": "oc new-build (IMAGE | IMAGESTREAM | PATH | URL ...) [flags]",
    "Arguments": {
        "--allow-missing-images=false": {
            "Text": "--allow-missing-images=false",
            "Description": "If true, indicates that referenced container images that cannot be found locally or in a registry should still be used."
        },
        "--allow-missing-imagestream-tags=false": {
            "Text": "--allow-missing-imagestream-tags=false",
            "Description": "If true, indicates that image stream tags that don\"t exist should still be used."
        },
        "--allow-missing-template-keys=true": {
            "Text": "--allow-missing-template-keys=true",
            "Description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats."
        },
        "--binary=false": {
            "Text": "--binary=false",
            "Description": "Instead of expecting a source URL, set the build to expect binary contents. Will disable triggers."
        },
        "--build-arg=[]": {
            "Text": "--build-arg=[]",
            "Description": "Specify a key-value pair to pass to Docker during the build."
        },
        "--build-config-map=[]": {
            "Text": "--build-config-map=[]",
            "Description": "ConfigMap and destination to use as an input for the build."
        },
        "--build-secret=[]": {
            "Text": "--build-secret=[]",
            "Description": "Secret and destination to use as an input for the build."
        },
        "--code=[]": {
            "Text": "--code=[]",
            "Description": "Source code in the build configuration."
        },
        "--context-dir=''": {
            "Text": "--context-dir=''",
            "Description": "Context directory to be used for the build."
        },
        "-D": {
            "Text": "-D",
            "Description": "Specify the contents of a Dockerfile to build directly, implies --strategy=docker. Pass \"-\"to read from STDIN. "
        },
        "--dockerfile=''": {
            "Text": "--dockerfile=''",
            "Description": "Specify the contents of a Dockerfile to build directly, implies --strategy=docker. Pass \"-\"to read from STDIN."
        },
        "--dry-run=false": {
            "Text": "--dry-run=false",
            "Description": "If true, show the result of the operation without performing it."
        },
        "-e": {
            "Text": "-e",
            "Description": "Specify a key-value pair for an environment variable to set into resulting image."
        },
        "--env=[]": {
            "Text": "--env=[]",
            "Description": "Specify a key-value pair for an environment variable to set into resulting image."
        },
        "--env-file=[]": {
            "Text": "--env-file=[]",
            "Description": "File containing key-value pairs of environment variables to set into each container."
        },
        "--image=[]": {
            "Text": "--image=[]",
            "Description": "Name of a container image to use as a builder."
        },
        "-i": {
            "Text": "-i",
            "Description": "Name of an image stream to to use as a builder."
        },
        "--image-stream=[]": {
            "Text": "--image-stream=[]",
            "Description": "Name of an image stream to to use as a builder."
        },
        "--insecure-registry=false": {
            "Text": "--insecure-registry=false",
            "Description": "If true, indicates that the referenced container images are on insecure registries and should bypass certificate checking"
        },
        "-l": {
            "Text": "-l",
            "Description": "Label to set in all generated resources."
        },
        "--labels=''": {
            "Text": "--labels=''",
            "Description": "Label to set in all generated resources."
        },
        "--name=''": {
            "Text": "--name=''",
            "Description": "Set name to use for generated build artifacts."
        },
        "--no-output=false": {
            "Text": "--no-output=false",
            "Description": "If true, the build output will not be pushed anywhere."
        },
        "-o": {
            "Text": "-o",
            "Description": "Output format. One of json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file."
        },
        "--output=''": {
            "Text": "--output=''",
            "Description": "Output format. One of json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file."
        },
        "--output-version=''": {
            "Text": "--output-version=''",
            "Description": "The preferred API versions of the output objects"
        },
        "--push-secret=''": {
            "Text": "--push-secret=''",
            "Description": "The name of an existing secret that should be used for pushing the output image."
        },
        "-a": {
            "Text": "-a",
            "Description": "When printing, show all resources (default hide terminated pods.)"
        },
        "--show-all=false": {
            "Text": "--show-all=false",
            "Description": "When printing, show all resources (default hide terminated pods.)"
        },
        "--show-labels=false": {
            "Text": "--show-labels=false",
            "Description": "When printing, show all labels as the last column (default hide labels column)"
        },
        "--show-managed-fields=false": {
            "Text": "--show-managed-fields=false",
            "Description": "If true, keep the managedFields when printing objects in JSON or YAML format."
        },
        "--source-image=''": {
            "Text": "--source-image=''",
            "Description": "Specify an image to use as source for the build.  You must also specify --source-image-path."
        },
        "--source-image-path=''": {
            "Text": "--source-image-path=''",
            "Description": "Specify the file or directory to copy from the source image and its destination in the build directory. Format: [source]:[destination-dir]."
        },
        "--source-secret=''": {
            "Text": "--source-secret=''",
            "Description": "The name of an existing secret that should be used for cloning a private git repository."
        },
        "--strategy=": {
            "Text": "--strategy=",
            "Description": "Specify the build strategy to use if you don\"t want to detect (docker|pipeline|source). "
        },
        "--template=''": {
            "Text": "--template=''",
            "Description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview]."
        },
        "--to=''": {
            "Text": "--to=''",
            "Description": "Push built images to this image stream tag (or container image repository if --to-docker is set)."
        },
        "--to-docker=false": {
            "Text": "--to-docker=false",
            "Description": "If true, have the build output push to a Docker repository."
        }
    }
}